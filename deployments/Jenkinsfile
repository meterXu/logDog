def rootPath  = "./deployments" //镜像构建脚本路径
def shellPath  = "./build.sh" //镜像构建脚本
def projectName = "沃壤前端日志工具" //项目名称
def gitUrl = "http://192.168.126.25/git/cbb/logfv.git" //git地址
def branch = "master" //git分支
def credentialsId = "c078ac92-89dd-4842-8292-5e348e68db08" //git认证id
def repositories = "192.168.126.19:85/logfv/" //镜像仓库地址
def auth = "admin:Sipsd@123" //镜像仓库认证信息
def tag = "logfv:v1" //镜像标签
def deleteUrl = "http://192.168.126.19:85/api/repositories/logfv/logfv/tags/v1" //镜像删除接口地址
def remoteHost="192.168.126.16" //容器所在服务器地址
def remoteUser="root" //容器所在服务器用户名
def remotePwd="kjjsyf#1314" //容器所在服务器密码
def containerName = "logfv-app" //容器名称
def dockerCompose = "/home/soft/logfv.yml" //容器编排脚本路径
def robot = "360ac2ce-efe5-4478-8703-7cd3bd463044" //钉钉机器人ID
pipeline {
    agent any
    stages {
        stage('拉取代码') {
            steps {
                git branch: "$branch", credentialsId: "$credentialsId", url: "$gitUrl"
            }
        }
        stage('镜像构建'){
            steps {
                script {
                    sh "cd $rootPath && chmod a+x $shellPath && sh $shellPath"
                }
            }
        }
        stage('镜像推送到远程仓库'){
            steps {
                script {
                        echo "删除远程${tag}镜像"
                        sh "curl --user $auth  -X DELETE $deleteUrl"
                        echo "推送镜像到远程仓库"
                        sh "docker tag $tag $repositories$tag"
                        sh "docker push $repositories$tag"
                        echo "删除本地${tag}镜像"
                        sh "docker rmi $repositories$tag"
                    }
                }
        }
        stage('远程启动容器') {
             steps {
                 script
                    {
                        stage ('启动容器') {
                               def remote = [:]
                               remote.name = 'remote'
                               remote.host = remoteHost
                               remote.user = remoteUser
                               remote.password = remotePwd
                               remote.allowAnyHosts= true
                               sshCommand remote: remote,command: "docker pull $repositories$tag"
                               sshCommand remote: remote,command: "docker stop $containerName"
                               sshCommand remote: remote,command: "docker rm $containerName"
                               sshCommand remote: remote,command: "docker rmi $repositories$tag"
                               sshCommand remote: remote,command: "docker-compose -f $dockerCompose up -d"
                        }
                    }

             }
        }
    }
    post {
        success {
            dingtalk(robot: robot,
            type: 'ACTION_CARD',
            at: [],
            atAll: false,
            title: '',
            text: [
            "* 任务：#${BUILD_NUMBER}",
            "* 项目：${projectName}",
            "* 状态：<font color=#00EE00 >部署成功</font>",
            "* 持续时间：${currentBuild.durationString}".split("and counting")[0],
            "* 执行人：${currentBuild.buildCauses.shortDescription}",
            ],
            messageUrl: '',
            picUrl: '',
            singleTitle: '',
            btns: [],
            btnLayout: 'H',
            hideAvatar: false
            )
        }
        failure {
            dingtalk(robot: robot,
            type: 'ACTION_CARD',
            at: [],
            atAll: false,
            title: '',
            text: [
            "* 任务：#${BUILD_NUMBER}",
            "* 项目：${projectName}",
            "* 状态：<font color=#EE0000 >部署失败</font>",
            "* 持续时间：${currentBuild.durationString}".split("and counting")[0],
            "* 执行人：${currentBuild.buildCauses.shortDescription}",
            ],
            messageUrl: '',
            picUrl: '',
            singleTitle: '',
            btnLayout: 'H',
            hideAvatar: false
            )
        }
    }
}
